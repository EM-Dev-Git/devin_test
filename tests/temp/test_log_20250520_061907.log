============================= test session starts ==============================
platform linux -- Python 3.12.8, pytest-7.4.3, pluggy-1.6.0 -- /home/ubuntu/EM_test_project/venv/bin/python
cachedir: .pytest_cache
rootdir: /home/ubuntu/EM_test_project
plugins: mock-3.12.0, asyncio-0.23.2, anyio-4.9.0, cov-4.1.0
asyncio: mode=Mode.STRICT
collecting ... collected 22 items

tests/api/v1/test_base_endpoints.py::test_root_endpoint ERROR            [  4%]
tests/api/v1/test_base_endpoints.py::test_health_check_endpoint ERROR    [  9%]
tests/api/v1/endpoints/test_auth.py::test_register_user ERROR            [ 13%]
tests/api/v1/endpoints/test_auth.py::test_register_duplicate_user ERROR  [ 18%]
tests/api/v1/endpoints/test_auth.py::test_login_for_access_token ERROR   [ 22%]
tests/api/v1/endpoints/test_auth.py::test_login_with_invalid_credentials ERROR [ 27%]
tests/api/v1/endpoints/test_items.py::test_create_item_endpoint ERROR    [ 31%]
tests/api/v1/endpoints/test_items.py::test_get_items_endpoint ERROR      [ 36%]
tests/api/v1/endpoints/test_items.py::test_get_item_endpoint ERROR       [ 40%]
tests/api/v1/endpoints/test_items.py::test_get_nonexistent_item_endpoint ERROR [ 45%]
tests/api/v1/endpoints/test_items.py::test_update_item_endpoint ERROR    [ 50%]
tests/api/v1/endpoints/test_items.py::test_delete_item_endpoint ERROR    [ 54%]
tests/api/v1/endpoints/test_llm.py::test_chat_with_ai ERROR              [ 59%]
tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_unauthorized ERROR [ 63%]
tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_invalid_request ERROR [ 68%]
tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_api_key_not_set ERROR [ 72%]
tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_performance ERROR  [ 77%]
tests/api/v1/endpoints/test_llm.py::test_masui_introduction ERROR        [ 81%]
tests/utils/test_middleware_and_utils.py::test_logging_middleware ERROR  [ 86%]
tests/utils/test_middleware_and_utils.py::test_cors_settings ERROR       [ 90%]
tests/utils/test_middleware_and_utils.py::test_settings_loading PASSED   [ 95%]
tests/utils/test_middleware_and_utils.py::test_jwt_token_verification ERROR [100%]

==================================== ERRORS ====================================
_____________________ ERROR at setup of test_root_endpoint _____________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008cf0e00>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008cdb9e0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$Vcwhn4UG1vqXuorbACSr5uQ5F9Z3xUAyApy/wRc4id2zliQE01ZVK', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008be3240>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$Vcwhn4UG1vqXuorbACSr5uQ5F9Z3xUAyApy/wRc4id2zliQE01ZVK', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008cdb9e0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008be3240>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$Vcwhn4UG1vqXuorbACSr5uQ5F9Z3xUAyApy/wRc4id2zliQE01ZVK', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008cdb9e0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$Vcwhn4UG1vqXuorbACSr5uQ5F9Z3xUAyApy/wRc4id2zliQE01ZVK', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
------------------------------ Captured log setup ------------------------------
WARNING  passlib.handlers.bcrypt:bcrypt.py:622 (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "/home/ubuntu/EM_test_project/venv/lib/python3.12/site-packages/passlib/handlers/bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
_________________ ERROR at setup of test_health_check_endpoint _________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008c4fce0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008c4e270>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$Ixlwq.4x.90IrbhORE8s7OAyZbMTWB9SuBbAc2OL2BrH0KCow7mKW', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007a409c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$Ixlwq.4x.90IrbhORE8s7OAyZbMTWB9SuBbAc2OL2BrH0KCow7mKW', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008c4e270>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007a409c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$Ixlwq.4x.90IrbhORE8s7OAyZbMTWB9SuBbAc2OL2BrH0KCow7mKW', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008c4e270>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$Ixlwq.4x.90IrbhORE8s7OAyZbMTWB9SuBbAc2OL2BrH0KCow7mKW', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_____________________ ERROR at setup of test_register_user _____________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008c4f9e0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008c4faa0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$S80kFF87QdxPeUWIjY1STuVf/qwH7NDDmgJXIgxCqr9e7sX6tYH/O', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f900858b9c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$S80kFF87QdxPeUWIjY1STuVf/qwH7NDDmgJXIgxCqr9e7sX6tYH/O', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008c4faa0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f900858b9c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$S80kFF87QdxPeUWIjY1STuVf/qwH7NDDmgJXIgxCqr9e7sX6tYH/O', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008c4faa0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$S80kFF87QdxPeUWIjY1STuVf/qwH7NDDmgJXIgxCqr9e7sX6tYH/O', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
________________ ERROR at setup of test_register_duplicate_user ________________

self = <sqlalchemy.engine.base.Connection object at 0x7f90089dc3b0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089dd100>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$ehS5T/PFWPyni.uTz1WgCup1k3p8YelUVcovsm1ghGKhW9tzrdDFO', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008224dc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$ehS5T/PFWPyni.uTz1WgCup1k3p8YelUVcovsm1ghGKhW9tzrdDFO', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089dd100>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008224dc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$ehS5T/PFWPyni.uTz1WgCup1k3p8YelUVcovsm1ghGKhW9tzrdDFO', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089dd100>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$ehS5T/PFWPyni.uTz1WgCup1k3p8YelUVcovsm1ghGKhW9tzrdDFO', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
________________ ERROR at setup of test_login_for_access_token _________________

self = <sqlalchemy.engine.base.Connection object at 0x7f90089dd400>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089deff0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$7g0Uff/hZZM4Y3JoHOMNPe6hWAadKoB0sKBexTmTs3ZlaWMT1O3Am', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008ad6940>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$7g0Uff/hZZM4Y3JoHOMNPe6hWAadKoB0sKBexTmTs3ZlaWMT1O3Am', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089deff0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008ad6940>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$7g0Uff/hZZM4Y3JoHOMNPe6hWAadKoB0sKBexTmTs3ZlaWMT1O3Am', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089deff0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$7g0Uff/hZZM4Y3JoHOMNPe6hWAadKoB0sKBexTmTs3ZlaWMT1O3Am', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
____________ ERROR at setup of test_login_with_invalid_credentials _____________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008bb9130>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb8d70>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$poCgxtAtf.WccS9j7Mn7BOqOCkk1UzxvFwNpno5QauAKs8QJjy1Mm', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007a41540>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$poCgxtAtf.WccS9j7Mn7BOqOCkk1UzxvFwNpno5QauAKs8QJjy1Mm', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb8d70>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007a41540>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$poCgxtAtf.WccS9j7Mn7BOqOCkk1UzxvFwNpno5QauAKs8QJjy1Mm', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb8d70>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$poCgxtAtf.WccS9j7Mn7BOqOCkk1UzxvFwNpno5QauAKs8QJjy1Mm', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_________________ ERROR at setup of test_create_item_endpoint __________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008bbbcb0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bbbd10>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$23HH/pyvJa/9HUr5RVARfOnczPeu53WSalS5anc.5xVyIvF0TEqne', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f900859ccc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$23HH/pyvJa/9HUr5RVARfOnczPeu53WSalS5anc.5xVyIvF0TEqne', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bbbd10>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f900859ccc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$23HH/pyvJa/9HUr5RVARfOnczPeu53WSalS5anc.5xVyIvF0TEqne', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bbbd10>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$23HH/pyvJa/9HUr5RVARfOnczPeu53WSalS5anc.5xVyIvF0TEqne', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
__________________ ERROR at setup of test_get_items_endpoint ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008b81ee0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b82000>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$IpQvsHPpY69nFpbVw4SaDOSALxFUwS21./CAP0m1f9cTFC9h.DKRO', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90080c0fc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$IpQvsHPpY69nFpbVw4SaDOSALxFUwS21./CAP0m1f9cTFC9h.DKRO', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b82000>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90080c0fc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$IpQvsHPpY69nFpbVw4SaDOSALxFUwS21./CAP0m1f9cTFC9h.DKRO', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b82000>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$IpQvsHPpY69nFpbVw4SaDOSALxFUwS21./CAP0m1f9cTFC9h.DKRO', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
___________________ ERROR at setup of test_get_item_endpoint ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008cf1490>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b80860>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$dVVJLe2Nl2s1IvvVyxyuGOZT6bHV5NiTG2R89F9Q3/.gK94tmwz8W', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008cd37c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$dVVJLe2Nl2s1IvvVyxyuGOZT6bHV5NiTG2R89F9Q3/.gK94tmwz8W', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b80860>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008cd37c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$dVVJLe2Nl2s1IvvVyxyuGOZT6bHV5NiTG2R89F9Q3/.gK94tmwz8W', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b80860>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$dVVJLe2Nl2s1IvvVyxyuGOZT6bHV5NiTG2R89F9Q3/.gK94tmwz8W', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_____________ ERROR at setup of test_get_nonexistent_item_endpoint _____________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008b68740>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b69970>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$V22C4AALOvCDW9SyEsGoTe6wUfsX5ACgGu9Qt3MVp2hE7BnrbUn.2', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007a17d40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$V22C4AALOvCDW9SyEsGoTe6wUfsX5ACgGu9Qt3MVp2hE7BnrbUn.2', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b69970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007a17d40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$V22C4AALOvCDW9SyEsGoTe6wUfsX5ACgGu9Qt3MVp2hE7BnrbUn.2', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b69970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$V22C4AALOvCDW9SyEsGoTe6wUfsX5ACgGu9Qt3MVp2hE7BnrbUn.2', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_________________ ERROR at setup of test_update_item_endpoint __________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008b64110>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b64200>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$x2yVp/lfRYlYcFlPflxXK.bW5.OPqKIZtp.JVjxITEFVL9iz.aDtu', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008b35f40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$x2yVp/lfRYlYcFlPflxXK.bW5.OPqKIZtp.JVjxITEFVL9iz.aDtu', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b64200>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008b35f40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$x2yVp/lfRYlYcFlPflxXK.bW5.OPqKIZtp.JVjxITEFVL9iz.aDtu', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b64200>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$x2yVp/lfRYlYcFlPflxXK.bW5.OPqKIZtp.JVjxITEFVL9iz.aDtu', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_________________ ERROR at setup of test_delete_item_endpoint __________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008b65a90>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b65970>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$d/KkZbInQ.V6DsBoBl8PE.6Ch1dinSxhyBEsGOdvpKIImoVluwCZa', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008cd32c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$d/KkZbInQ.V6DsBoBl8PE.6Ch1dinSxhyBEsGOdvpKIImoVluwCZa', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b65970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008cd32c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$d/KkZbInQ.V6DsBoBl8PE.6Ch1dinSxhyBEsGOdvpKIImoVluwCZa', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b65970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$d/KkZbInQ.V6DsBoBl8PE.6Ch1dinSxhyBEsGOdvpKIImoVluwCZa', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_____________________ ERROR at setup of test_chat_with_ai ______________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008b80e30>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b82630>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$NNttlclONQMCHr2JEuxOl.XVoBzkRDvxEppMHc8MKRFTGhf/V7mSq', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90082f5b40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$NNttlclONQMCHr2JEuxOl.XVoBzkRDvxEppMHc8MKRFTGhf/V7mSq', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b82630>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90082f5b40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$NNttlclONQMCHr2JEuxOl.XVoBzkRDvxEppMHc8MKRFTGhf/V7mSq', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b82630>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$NNttlclONQMCHr2JEuxOl.XVoBzkRDvxEppMHc8MKRFTGhf/V7mSq', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_______________ ERROR at setup of test_chat_with_ai_unauthorized _______________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008bbb320>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bbbd40>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$pJD5dR1Ce.c1n1i8p2GrW.xfHVAN8og1s8f6NoUs51F/HoCClOBgq', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008ad60c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$pJD5dR1Ce.c1n1i8p2GrW.xfHVAN8og1s8f6NoUs51F/HoCClOBgq', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bbbd40>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008ad60c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$pJD5dR1Ce.c1n1i8p2GrW.xfHVAN8og1s8f6NoUs51F/HoCClOBgq', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bbbd40>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$pJD5dR1Ce.c1n1i8p2GrW.xfHVAN8og1s8f6NoUs51F/HoCClOBgq', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_____________ ERROR at setup of test_chat_with_ai_invalid_request ______________

self = <sqlalchemy.engine.base.Connection object at 0x7f90089dfad0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089dfc20>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$YV4a46FbApBvih7PQS3swO.254V8wpcU/ftjcHzSl3OrUFvPJJLoq', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007c87b40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$YV4a46FbApBvih7PQS3swO.254V8wpcU/ftjcHzSl3OrUFvPJJLoq', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089dfc20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007c87b40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$YV4a46FbApBvih7PQS3swO.254V8wpcU/ftjcHzSl3OrUFvPJJLoq', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f90089dfc20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$YV4a46FbApBvih7PQS3swO.254V8wpcU/ftjcHzSl3OrUFvPJJLoq', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_____________ ERROR at setup of test_chat_with_ai_api_key_not_set ______________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008cf1ca0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bc9880>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$g8wgux0ewQjOwf.sgW7/Q.umLurc9Q6M9CSmnSfIg1jFGZW6bGFrC', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008b367c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$g8wgux0ewQjOwf.sgW7/Q.umLurc9Q6M9CSmnSfIg1jFGZW6bGFrC', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bc9880>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008b367c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$g8wgux0ewQjOwf.sgW7/Q.umLurc9Q6M9CSmnSfIg1jFGZW6bGFrC', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bc9880>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$g8wgux0ewQjOwf.sgW7/Q.umLurc9Q6M9CSmnSfIg1jFGZW6bGFrC', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_______________ ERROR at setup of test_chat_with_ai_performance ________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008b68170>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b67c50>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$3AvwpyD98x1eWAHG9bUhpOQi.Kb0pkNxNwO9iuXSChrdpZmsVOPcK', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007f975c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$3AvwpyD98x1eWAHG9bUhpOQi.Kb0pkNxNwO9iuXSChrdpZmsVOPcK', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b67c50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9007f975c0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$3AvwpyD98x1eWAHG9bUhpOQi.Kb0pkNxNwO9iuXSChrdpZmsVOPcK', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008b67c50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$3AvwpyD98x1eWAHG9bUhpOQi.Kb0pkNxNwO9iuXSChrdpZmsVOPcK', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
__________________ ERROR at setup of test_masui_introduction ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008ae3950>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008ae34d0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$diD7fQorcoW3FgiMGfrAYehzf9UKUpn2BWNITJAb8xsN/OH8CsQRu', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90080c2dc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$diD7fQorcoW3FgiMGfrAYehzf9UKUpn2BWNITJAb8xsN/OH8CsQRu', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008ae34d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90080c2dc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$diD7fQorcoW3FgiMGfrAYehzf9UKUpn2BWNITJAb8xsN/OH8CsQRu', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008ae34d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$diD7fQorcoW3FgiMGfrAYehzf9UKUpn2BWNITJAb8xsN/OH8CsQRu', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
__________________ ERROR at setup of test_logging_middleware ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008ae27b0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008ae28d0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$YlDIF8eeVon2q9RfS6GnA.KFhB1UGHtkvMKDSDJbEVnYFgK8fiknO', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90080eab40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$YlDIF8eeVon2q9RfS6GnA.KFhB1UGHtkvMKDSDJbEVnYFgK8fiknO', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008ae28d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f90080eab40>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$YlDIF8eeVon2q9RfS6GnA.KFhB1UGHtkvMKDSDJbEVnYFgK8fiknO', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008ae28d0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$YlDIF8eeVon2q9RfS6GnA.KFhB1UGHtkvMKDSDJbEVnYFgK8fiknO', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
_____________________ ERROR at setup of test_cors_settings _____________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008bb1280>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb14c0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$sxcdCPDXOIdFeoEoGAtp6ejJTZpzV74EAIgmhvPdkn5RmN7CSCMKW', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f900859cdc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$sxcdCPDXOIdFeoEoGAtp6ejJTZpzV74EAIgmhvPdkn5RmN7CSCMKW', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb14c0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f900859cdc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$sxcdCPDXOIdFeoEoGAtp6ejJTZpzV74EAIgmhvPdkn5RmN7CSCMKW', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb14c0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$sxcdCPDXOIdFeoEoGAtp6ejJTZpzV74EAIgmhvPdkn5RmN7CSCMKW', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
________________ ERROR at setup of test_jwt_token_verification _________________

self = <sqlalchemy.engine.base.Connection object at 0x7f9008bb2a50>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb2b40>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f9008cdbc20>
parameters = [('testuser', 'test@example.com', '$2b$12$HHBydjdIdjOHjUu.9K1NH.bHGt4eYWNzuh/HbaHAZjcSuTD3LP/7i', 1)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008969cc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$HHBydjdIdjOHjUu.9K1NH.bHGt4eYWNzuh/HbaHAZjcSuTD3LP/7i', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb2b40>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError

The above exception was the direct cause of the following exception:

test_engine = Engine(sqlite:///:memory:)

    @pytest.fixture(scope="function")
    def test_db(test_engine):
        """テスト用のデータベースを提供するフィクスチャ"""
        Base.metadata.drop_all(bind=test_engine)
        Base.metadata.create_all(bind=test_engine)
    
        TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)
        db = TestingSessionLocal()
    
        try:
            from app.models.user import User
            from app.models.item import Item
            from app.utils.auth import get_password_hash
    
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=get_password_hash("testpassword"),
                is_active=True
            )
            db.add(test_user)
>           db.commit()

tests/conftest.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4345: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4480: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4441: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1415: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1637: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1842: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1982: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2351: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1963: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f9008cf1760>
cursor = <sqlite3.Cursor object at 0x7f9008969cc0>
statement = 'INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)'
parameters = ('testuser', 'test@example.com', '$2b$12$HHBydjdIdjOHjUu.9K1NH.bHGt4eYWNzuh/HbaHAZjcSuTD3LP/7i', 1)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f9008bb2b40>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: INSERT INTO users (username, email, hashed_password, is_active) VALUES (?, ?, ?, ?)]
E       [parameters: ('testuser', 'test@example.com', '$2b$12$HHBydjdIdjOHjUu.9K1NH.bHGt4eYWNzuh/HbaHAZjcSuTD3LP/7i', 1)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:943: OperationalError
=============================== warnings summary ===============================
app/db/session.py:23
  /home/ubuntu/EM_test_project/app/db/session.py:23: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

app/database.py:22
  /home/ubuntu/EM_test_project/app/database.py:22: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854
  /home/ubuntu/EM_test_project/venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:323
  /home/ubuntu/EM_test_project/venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

venv/lib/python3.12/site-packages/pydantic/fields.py:1076
venv/lib/python3.12/site-packages/pydantic/fields.py:1076
venv/lib/python3.12/site-packages/pydantic/fields.py:1076
  /home/ubuntu/EM_test_project/venv/lib/python3.12/site-packages/pydantic/fields.py:1076: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'env'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warn(

tests/utils/test_middleware_and_utils.py::test_settings_loading
  /home/ubuntu/EM_test_project/venv/lib/python3.12/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but tests/utils/test_middleware_and_utils.py::test_settings_loading returned {'test_id': 'UTIL-003', 'status': '成功', 'execution_time': 5.9604644775390625e-06, 'details': '設定値が正しく読み込まれています。'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
ERROR tests/api/v1/test_base_endpoints.py::test_root_endpoint - sqlalchemy.ex...
ERROR tests/api/v1/test_base_endpoints.py::test_health_check_endpoint - sqlal...
ERROR tests/api/v1/endpoints/test_auth.py::test_register_user - sqlalchemy.ex...
ERROR tests/api/v1/endpoints/test_auth.py::test_register_duplicate_user - sql...
ERROR tests/api/v1/endpoints/test_auth.py::test_login_for_access_token - sqla...
ERROR tests/api/v1/endpoints/test_auth.py::test_login_with_invalid_credentials
ERROR tests/api/v1/endpoints/test_items.py::test_create_item_endpoint - sqlal...
ERROR tests/api/v1/endpoints/test_items.py::test_get_items_endpoint - sqlalch...
ERROR tests/api/v1/endpoints/test_items.py::test_get_item_endpoint - sqlalche...
ERROR tests/api/v1/endpoints/test_items.py::test_get_nonexistent_item_endpoint
ERROR tests/api/v1/endpoints/test_items.py::test_update_item_endpoint - sqlal...
ERROR tests/api/v1/endpoints/test_items.py::test_delete_item_endpoint - sqlal...
ERROR tests/api/v1/endpoints/test_llm.py::test_chat_with_ai - sqlalchemy.exc....
ERROR tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_unauthorized - sq...
ERROR tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_invalid_request
ERROR tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_api_key_not_set
ERROR tests/api/v1/endpoints/test_llm.py::test_chat_with_ai_performance - sql...
ERROR tests/api/v1/endpoints/test_llm.py::test_masui_introduction - sqlalchem...
ERROR tests/utils/test_middleware_and_utils.py::test_logging_middleware - sql...
ERROR tests/utils/test_middleware_and_utils.py::test_cors_settings - sqlalche...
ERROR tests/utils/test_middleware_and_utils.py::test_jwt_token_verification
================== 1 passed, 10 warnings, 21 errors in 13.34s ==================
